--- catkin_ws/src/navigation/move_base/CMakeLists.txt	2014-12-06 03:49:40.000000000 -0300
+++ catkin_ws/src/navigation/move_base/CMakeLists.txt	2015-02-04 18:22:06.292433561 -0300
@@ -8,6 +8,9 @@
         pluginlib
         actionlib
         dynamic_reconfigure
+        navfn
+        dwa_local_planner
+        clear_costmap_recovery
         message_generation
         nav_core
         tf
@@ -24,6 +27,9 @@
     CATKIN_DEPENDS
         roscpp
         dynamic_reconfigure
+        navfn
+        dwa_local_planner
+        clear_costmap_recovery
 )
 
 include_directories(
@@ -66,6 +72,14 @@
     TARGETS
         move_base
         move_base_node
+    ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
     LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
     RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
 )
+
+## Mark cpp header files for installation
+install(DIRECTORY include/${PROJECT_NAME}/
+  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
+  FILES_MATCHING PATTERN "*.h"
+  PATTERN ".svn" EXCLUDE
+)
--- catkin_ws/src/navigation/move_base/include/move_base/move_base.h	2014-12-06 03:49:40.000000000 -0300
+++ catkin_ws/src/navigation/move_base/include/move_base/move_base.h	2015-02-04 19:08:33.244369624 -0300
@@ -56,6 +56,10 @@
 #include <pluginlib/class_loader.h>
 #include <std_srvs/Empty.h>
 
+#include <navfn/navfn_ros.h>
+#include <dwa_local_planner/dwa_planner_ros.h>
+#include <clear_costmap_recovery/clear_costmap_recovery.h>
+
 #include <dynamic_reconfigure/server.h>
 #include "move_base/MoveBaseConfig.h"
 
@@ -201,9 +205,6 @@
 
       ros::Time last_valid_plan_, last_valid_control_, last_oscillation_reset_;
       geometry_msgs::PoseStamped oscillation_pose_;
-      pluginlib::ClassLoader<nav_core::BaseGlobalPlanner> bgp_loader_;
-      pluginlib::ClassLoader<nav_core::BaseLocalPlanner> blp_loader_;
-      pluginlib::ClassLoader<nav_core::RecoveryBehavior> recovery_loader_;
 
       //set up plan triple buffer
       std::vector<geometry_msgs::PoseStamped>* planner_plan_;
--- catkin_ws/src/navigation/move_base/package.xml	2014-12-06 03:49:40.000000000 -0300
+++ catkin_ws/src/navigation/move_base/package.xml	2015-02-04 18:20:17.544436056 -0300
@@ -35,6 +35,7 @@
     <!--These deps aren't strictly needed, but given the default parameters require them to work, we'll enforce that they build -->
     <build_depend>base_local_planner</build_depend>
     <build_depend>clear_costmap_recovery</build_depend>
+    <build_depend>dwa_local_planner</build_depend>
     <build_depend>navfn</build_depend>
     <build_depend>rotate_recovery</build_depend>
     <run_depend>base_local_planner</run_depend>
@@ -46,6 +47,7 @@
 
     <run_depend>actionlib</run_depend>
     <run_depend>costmap_2d</run_depend>
+    <run_depend>dwa_local_planner</run_depend>
     <run_depend>dynamic_reconfigure</run_depend>
     <run_depend>geometry_msgs</run_depend>
     <run_depend>message_runtime</run_depend>
--- catkin_ws/src/navigation/move_base/src/move_base.cpp	2014-12-06 03:49:40.000000000 -0300
+++ catkin_ws/src/navigation/move_base/src/move_base.cpp	2015-02-04 18:19:05.148437717 -0300
@@ -49,9 +49,6 @@
     tf_(tf),
     as_(NULL),
     planner_costmap_ros_(NULL), controller_costmap_ros_(NULL),
-    bgp_loader_("nav_core", "nav_core::BaseGlobalPlanner"),
-    blp_loader_("nav_core", "nav_core::BaseLocalPlanner"), 
-    recovery_loader_("nav_core", "nav_core::RecoveryBehavior"),
     planner_plan_(NULL), latest_plan_(NULL), controller_plan_(NULL),
     runPlanner_(false), setup_(false), p_freq_change_(false), c_freq_change_(false), new_global_plan_(false) {
 
@@ -112,57 +109,17 @@
     planner_costmap_ros_->pause();
 
     //initialize the global planner
-    try {
-      //check if a non fully qualified name has potentially been passed in
-      if(!bgp_loader_.isClassAvailable(global_planner)){
-        std::vector<std::string> classes = bgp_loader_.getDeclaredClasses();
-        for(unsigned int i = 0; i < classes.size(); ++i){
-          if(global_planner == bgp_loader_.getName(classes[i])){
-            //if we've found a match... we'll get the fully qualified name and break out of the loop
-            ROS_WARN("Planner specifications should now include the package name. You are using a deprecated API. Please switch from %s to %s in your yaml file.",
-                global_planner.c_str(), classes[i].c_str());
-            global_planner = classes[i];
-            break;
-          }
-        }
-      }
-
-      planner_ = bgp_loader_.createInstance(global_planner);
-      planner_->initialize(bgp_loader_.getName(global_planner), planner_costmap_ros_);
-    } catch (const pluginlib::PluginlibException& ex)
-    {
-      ROS_FATAL("Failed to create the %s planner, are you sure it is properly registered and that the containing library is built? Exception: %s", global_planner.c_str(), ex.what());
-      exit(1);
-    }
+    planner_.reset(new navfn::NavfnROS());
+    planner_->initialize(std::string("navfn"), planner_costmap_ros_);
 
     //create the ros wrapper for the controller's costmap... and initializer a pointer we'll use with the underlying map
     controller_costmap_ros_ = new costmap_2d::Costmap2DROS("local_costmap", tf_);
     controller_costmap_ros_->pause();
 
     //create a local planner
-    try {
-      //check if a non fully qualified name has potentially been passed in
-      if(!blp_loader_.isClassAvailable(local_planner)){
-        std::vector<std::string> classes = blp_loader_.getDeclaredClasses();
-        for(unsigned int i = 0; i < classes.size(); ++i){
-          if(local_planner == blp_loader_.getName(classes[i])){
-            //if we've found a match... we'll get the fully qualified name and break out of the loop
-            ROS_WARN("Planner specifications should now include the package name. You are using a deprecated API. Please switch from %s to %s in your yaml file.",
-                local_planner.c_str(), classes[i].c_str());
-            local_planner = classes[i];
-            break;
-          }
-        }
-      }
-
-      tc_ = blp_loader_.createInstance(local_planner);
-      ROS_INFO("Created local_planner %s", local_planner.c_str());
-      tc_->initialize(blp_loader_.getName(local_planner), &tf_, controller_costmap_ros_);
-    } catch (const pluginlib::PluginlibException& ex)
-    {
-      ROS_FATAL("Failed to create the %s planner, are you sure it is properly registered and that the containing library is built? Exception: %s", local_planner.c_str(), ex.what());
-      exit(1);
-    }
+    tc_.reset(new dwa_local_planner::DWAPlannerROS());
+    ROS_INFO("Created local_planner %s", "dwa_local_planner");
+    tc_->initialize(std::string("TrajectoryPlannerROS"), &tf_, controller_costmap_ros_);
 
     // Start actively updating costmaps based on sensor data
     planner_costmap_ros_->start();
@@ -181,10 +138,8 @@
       controller_costmap_ros_->stop();
     }
 
-    //load any user specified recovery behaviors, and if that fails load the defaults
-    if(!loadRecoveryBehaviors(private_nh)){
-      loadDefaultRecoveryBehaviors();
-    }
+    //load the default recovery behaviours
+    loadDefaultRecoveryBehaviors();
 
     //initially, we'll need to make a plan
     state_ = PLANNING;
@@ -245,73 +200,38 @@
       boost::shared_ptr<nav_core::BaseGlobalPlanner> old_planner = planner_;
       //initialize the global planner
       ROS_INFO("Loading global planner %s", config.base_global_planner.c_str());
-      try {
-        //check if a non fully qualified name has potentially been passed in
-        if(!bgp_loader_.isClassAvailable(config.base_global_planner)){
-          std::vector<std::string> classes = bgp_loader_.getDeclaredClasses();
-          for(unsigned int i = 0; i < classes.size(); ++i){
-            if(config.base_global_planner == bgp_loader_.getName(classes[i])){
-              //if we've found a match... we'll get the fully qualified name and break out of the loop
-              ROS_WARN("Planner specifications should now include the package name. You are using a deprecated API. Please switch from %s to %s in your yaml file.",
-                  config.base_global_planner.c_str(), classes[i].c_str());
-              config.base_global_planner = classes[i];
-              break;
-            }
-          }
-        }
 
-        planner_ = bgp_loader_.createInstance(config.base_global_planner);
+      // wait for the current planner to finish planning
+      boost::unique_lock<boost::mutex> lock(planner_mutex_);
 
-        // wait for the current planner to finish planning
-        boost::unique_lock<boost::mutex> lock(planner_mutex_);
+      planner_.reset(new navfn::NavfnROS());
 
-        // Clean up before initializing the new planner
-        planner_plan_->clear();
-        latest_plan_->clear();
-        controller_plan_->clear();
-        resetState();
-        planner_->initialize(bgp_loader_.getName(config.base_global_planner), planner_costmap_ros_);
+      // Clean up before initializing the new planner
+      planner_plan_->clear();
+      latest_plan_->clear();
+      controller_plan_->clear();
+      resetState();
 
-        lock.unlock();
-      } catch (const pluginlib::PluginlibException& ex)
-      {
-        ROS_FATAL("Failed to create the %s planner, are you sure it is properly registered and that the containing library is built? Exception: %s", config.base_global_planner.c_str(), ex.what());
-        planner_ = old_planner;
-        config.base_global_planner = last_config_.base_global_planner;
-      }
+      lock.unlock();
     }
 
     if(config.base_local_planner != last_config_.base_local_planner){
       boost::shared_ptr<nav_core::BaseLocalPlanner> old_planner = tc_;
       //create a local planner
-      try {
-        //check if a non fully qualified name has potentially been passed in
-        ROS_INFO("Loading local planner: %s", config.base_local_planner.c_str());
-        if(!blp_loader_.isClassAvailable(config.base_local_planner)){
-          std::vector<std::string> classes = blp_loader_.getDeclaredClasses();
-          for(unsigned int i = 0; i < classes.size(); ++i){
-            if(config.base_local_planner == blp_loader_.getName(classes[i])){
-              //if we've found a match... we'll get the fully qualified name and break out of the loop
-              ROS_WARN("Planner specifications should now include the package name. You are using a deprecated API. Please switch from %s to %s in your yaml file.",
-                  config.base_local_planner.c_str(), classes[i].c_str());
-              config.base_local_planner = classes[i];
-              break;
-            }
-          }
-        }
-        tc_ = blp_loader_.createInstance(config.base_local_planner);
-        // Clean up before initializing the new planner
-        planner_plan_->clear();
-        latest_plan_->clear();
-        controller_plan_->clear();
-        resetState();
-        tc_->initialize(blp_loader_.getName(config.base_local_planner), &tf_, controller_costmap_ros_);
-      } catch (const pluginlib::PluginlibException& ex)
-      {
-        ROS_FATAL("Failed to create the %s planner, are you sure it is properly registered and that the containing library is built? Exception: %s", config.base_local_planner.c_str(), ex.what());
-        tc_ = old_planner;
-        config.base_local_planner = last_config_.base_local_planner;
-      }
+      // Clean up before initializing the new planner
+      planner_plan_->clear();
+      latest_plan_->clear();
+      controller_plan_->clear();
+      resetState();
+
+      ROS_INFO("Loading local planner: %s", config.base_local_planner.c_str());
+      tc_.reset(new dwa_local_planner::DWAPlannerROS());
+      // Clean up before initializing the new planner
+      planner_plan_->clear();
+      latest_plan_->clear();
+      controller_plan_->clear();
+      resetState();
+      tc_->initialize(std::string("dwa_local_planner"), &tf_, controller_costmap_ros_);
     }
 
     last_config_ = config;
@@ -1030,122 +950,27 @@
   }
 
   bool MoveBase::loadRecoveryBehaviors(ros::NodeHandle node){
-    XmlRpc::XmlRpcValue behavior_list;
-    if(node.getParam("recovery_behaviors", behavior_list)){
-      if(behavior_list.getType() == XmlRpc::XmlRpcValue::TypeArray){
-        for(int i = 0; i < behavior_list.size(); ++i){
-          if(behavior_list[i].getType() == XmlRpc::XmlRpcValue::TypeStruct){
-            if(behavior_list[i].hasMember("name") && behavior_list[i].hasMember("type")){
-              //check for recovery behaviors with the same name
-              for(int j = i + 1; j < behavior_list.size(); j++){
-                if(behavior_list[j].getType() == XmlRpc::XmlRpcValue::TypeStruct){
-                  if(behavior_list[j].hasMember("name") && behavior_list[j].hasMember("type")){
-                    std::string name_i = behavior_list[i]["name"];
-                    std::string name_j = behavior_list[j]["name"];
-                    if(name_i == name_j){
-                      ROS_ERROR("A recovery behavior with the name %s already exists, this is not allowed. Using the default recovery behaviors instead.", 
-                          name_i.c_str());
-                      return false;
-                    }
-                  }
-                }
-              }
-            }
-            else{
-              ROS_ERROR("Recovery behaviors must have a name and a type and this does not. Using the default recovery behaviors instead.");
-              return false;
-            }
-          }
-          else{
-            ROS_ERROR("Recovery behaviors must be specified as maps, but they are XmlRpcType %d. We'll use the default recovery behaviors instead.",
-                behavior_list[i].getType());
-            return false;
-          }
-        }
-
-        //if we've made it to this point, we know that the list is legal so we'll create all the recovery behaviors
-        for(int i = 0; i < behavior_list.size(); ++i){
-          try{
-            //check if a non fully qualified name has potentially been passed in
-            if(!recovery_loader_.isClassAvailable(behavior_list[i]["type"])){
-              std::vector<std::string> classes = recovery_loader_.getDeclaredClasses();
-              for(unsigned int i = 0; i < classes.size(); ++i){
-                if(behavior_list[i]["type"] == recovery_loader_.getName(classes[i])){
-                  //if we've found a match... we'll get the fully qualified name and break out of the loop
-                  ROS_WARN("Recovery behavior specifications should now include the package name. You are using a deprecated API. Please switch from %s to %s in your yaml file.",
-                      std::string(behavior_list[i]["type"]).c_str(), classes[i].c_str());
-                  behavior_list[i]["type"] = classes[i];
-                  break;
-                }
-              }
-            }
-
-            boost::shared_ptr<nav_core::RecoveryBehavior> behavior(recovery_loader_.createInstance(behavior_list[i]["type"]));
-
-            //shouldn't be possible, but it won't hurt to check
-            if(behavior.get() == NULL){
-              ROS_ERROR("The ClassLoader returned a null pointer without throwing an exception. This should not happen");
-              return false;
-            }
-
-            //initialize the recovery behavior with its name
-            behavior->initialize(behavior_list[i]["name"], &tf_, planner_costmap_ros_, controller_costmap_ros_);
-            recovery_behaviors_.push_back(behavior);
-          }
-          catch(pluginlib::PluginlibException& ex){
-            ROS_ERROR("Failed to load a plugin. Using default recovery behaviors. Error: %s", ex.what());
-            return false;
-          }
-        }
-      }
-      else{
-        ROS_ERROR("The recovery behavior specification must be a list, but is of XmlRpcType %d. We'll use the default recovery behaviors instead.", 
-            behavior_list.getType());
-        return false;
-      }
-    }
-    else{
-      //if no recovery_behaviors are specified, we'll just load the defaults
-      return false;
-    }
-
-    //if we've made it here... we've constructed a recovery behavior list successfully
-    return true;
+    return false;
   }
 
   //we'll load our default recovery behaviors here
   void MoveBase::loadDefaultRecoveryBehaviors(){
     recovery_behaviors_.clear();
-    try{
-      //we need to set some parameters based on what's been passed in to us to maintain backwards compatibility
-      ros::NodeHandle n("~");
-      n.setParam("conservative_reset/reset_distance", conservative_reset_dist_);
-      n.setParam("aggressive_reset/reset_distance", circumscribed_radius_ * 4);
-
-      //first, we'll load a recovery behavior to clear the costmap
-      boost::shared_ptr<nav_core::RecoveryBehavior> cons_clear(recovery_loader_.createInstance("clear_costmap_recovery/ClearCostmapRecovery"));
-      cons_clear->initialize("conservative_reset", &tf_, planner_costmap_ros_, controller_costmap_ros_);
-      recovery_behaviors_.push_back(cons_clear);
-
-      //next, we'll load a recovery behavior to rotate in place
-      boost::shared_ptr<nav_core::RecoveryBehavior> rotate(recovery_loader_.createInstance("rotate_recovery/RotateRecovery"));
-      if(clearing_rotation_allowed_){
-        rotate->initialize("rotate_recovery", &tf_, planner_costmap_ros_, controller_costmap_ros_);
-        recovery_behaviors_.push_back(rotate);
-      }
 
-      //next, we'll load a recovery behavior that will do an aggressive reset of the costmap
-      boost::shared_ptr<nav_core::RecoveryBehavior> ags_clear(recovery_loader_.createInstance("clear_costmap_recovery/ClearCostmapRecovery"));
-      ags_clear->initialize("aggressive_reset", &tf_, planner_costmap_ros_, controller_costmap_ros_);
-      recovery_behaviors_.push_back(ags_clear);
-
-      //we'll rotate in-place one more time
-      if(clearing_rotation_allowed_)
-        recovery_behaviors_.push_back(rotate);
-    }
-    catch(pluginlib::PluginlibException& ex){
-      ROS_FATAL("Failed to load a plugin. This should not happen on default recovery behaviors. Error: %s", ex.what());
-    }
+    //we need to set some parameters based on what's been passed in to us to maintain backwards compatibility
+    ros::NodeHandle n("~");
+    n.setParam("conservative_reset/reset_distance", conservative_reset_dist_);
+    n.setParam("aggressive_reset/reset_distance", circumscribed_radius_ * 4);
+
+    //first, we'll load a recovery behavior to clear the costmap
+    boost::shared_ptr<nav_core::RecoveryBehavior> cons_clear(new clear_costmap_recovery::ClearCostmapRecovery());
+    cons_clear->initialize(std::string("conservative_reset"), &tf_, planner_costmap_ros_, controller_costmap_ros_);
+    recovery_behaviors_.push_back(cons_clear);
+
+    //next, we'll load a recovery behavior that will do an aggressive reset of the costmap
+    boost::shared_ptr<nav_core::RecoveryBehavior> ags_clear(new clear_costmap_recovery::ClearCostmapRecovery());
+    ags_clear->initialize(std::string("aggressive_reset"), &tf_, planner_costmap_ros_, controller_costmap_ros_);
+    recovery_behaviors_.push_back(ags_clear);
 
     return;
   }
